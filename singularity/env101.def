Bootstrap: docker
From: ubuntu:20.04

%files
    requirements.txt ./

%environment
    export TZ=Asia/Tokyo
    export PYTHONDONTWRITEBYTECODE=1
    export PATH="/usr/local/cuda/bin:$PATH"
    export LD_LIBRARY_PATH="/usr/local/cuda/lib64:$LD_LIBRARY_PATH"

%post
    rm -rf /var/lib/apt/lists/*
    apt-get update
    DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata software-properties-common wget

    apt-get update
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin
    mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600
    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub
    add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /"

    apt-get update
    DEBIAN_FRONTEND=noninteractive apt-get install -y cuda-10-1 libcudnn7 wget curl git nano \
        python3-dev python3-pip python-is-python3 libgtk-3-dev python3-tk python3-vtk7 \
        gcc-7 g++-7 cmake build-essential git pkg-config ccache unzip extra-cmake-modules mesa-utils ffmpeg \
        libavcodec-dev libavutil-dev libavformat-dev libavdevice-dev libswscale-dev libswresample-dev libavfilter-dev \
        libtbb-dev libogre-1.9-dev libjpeg-dev libjpeg-turbo8-dev libjpeg8-dev libpng-dev libtiff5-dev x264 libxvidcore-dev yasm \
        libxine2-dev libv4l-dev libfaac-dev libmp3lame-dev libopencore-amrnb-dev \
        libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev \
        x264 v4l-utils libdc1394-22 libdc1394-22-dev libtiff5-dev \
        qt5-default libeigen3-dev libeigen3-doc tesseract-ocr tesseract-ocr-jpn \
        vtk7 tcl-vtk7 libgflags-dev autoconf automake libtool \
        autoconf-archive libleptonica-dev libtesseract-dev gphoto2 liblapacke-dev \
        libopenjp2-7-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev \
        tcl8.6-dev tk8.6-dev libharfbuzz-dev libfribidi-dev libxcb1-dev

    pip3 install -r requirements.txt

    # Build OpenCV with CUDA.
    git clone https://github.com/opencv/opencv.git
    cd opencv
    git checkout -b tag 4.5.2
    cd ../
    git clone https://github.com/opencv/opencv_contrib.git
    cd opencv_contrib
    git checkout -b tag 4.5.2
    cd ../
    cd opencv && mkdir build && cd build
    CC=gcc-7 CXX=g++-7 cmake -D CMAKE_BUILD_TYPE=RELEASE -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
        -D OPENCV_GENERATE_PKGCONFIG=ON -D BUILD_opencv_apps=ON -D BUILD_opencv_calib3d=ON -D BUILD_opencv_core=ON \
        -D BUILD_opencv_cudaarithm=ON -D BUILD_opencv_cudabgsegm=ON -D BUILD_opencv_cudacodec=ON \
        -D BUILD_opencv_cudafeatures2d=ON -D BUILD_opencv_cudafilters=ON -D BUILD_opencv_cudaimgproc=ON \
        -D BUILD_opencv_cudalegacy=ON -D BUILD_opencv_cudaobjdetect=ON -D BUILD_opencv_cudaoptflow=ON \
        -D BUILD_opencv_cudastereo=ON -D BUILD_opencv_cudawarping=ON -D BUILD_opencv_cudev=ON \
        -D BUILD_opencv_features2d=ON -D BUILD_opencv_flann=ON -D BUILD_opencv_highgui=OFF -D BUILD_opencv_imgcodecs=ON \
        -D BUILD_opencv_imgproc=ON -D BUILD_opencv_ml=ON -D BUILD_opencv_objdetect=ON \
        -D BUILD_opencv_photo=ON -D BUILD_opencv_stitching=ON -D BUILD_opencv_superres=ON \
        -D BUILD_opencv_ts=ON -D BUILD_opencv_video=ON -D BUILD_opencv_videoio=ON -D BUILD_opencv_videostab=ON \
        -D WITH_1394=ON -D WITH_CUBLAS=OFF -D WITH_CUDA=ON -D WITH_CUFFT=ON -D WITH_EIGEN=ON -D WITH_FFMPEG=ON \
        -D WITH_GDAL=OFF -D WITH_GPHOTO2=ON -D WITH_GIGEAPI=ON -D WITH_GSTREAMER=ON -D WITH_GTK=ON \
        -D WITH_INTELPERC=OFF -D WITH_IPP=ON -D WITH_IPP_A=OFF -D WITH_JASPER=ON -D WITH_JPEG=ON -D WITH_LIBV4L=ON \
        -D WITH_OPENCL=ON -D WITH_OPENCLAMDBLAS=OFF -D WITH_OPENCLAMDFFT=OFF -D WITH_OPENCL_SVM=OFF \
        -D WITH_OPENEXR=ON -D WITH_OPENGL=ON -D WITH_OPENMP=OFF -D WITH_OPENNI=OFF -D WITH_PNG=ON \
        -D WITH_PTHREADS_PF=OFF -D WITH_PVAPI=ON -D WITH_QT=ON -D WITH_TBB=ON -D WITH_TIFF=ON \
        -D WITH_UNICAP=OFF -D WITH_V4L=ON -D WITH_VTK=ON -D WITH_WEBP=ON -D WITH_XIMEA=OFF -D WITH_XINE=OFF \
        -D CUDA_NVCC_FLAGS=--expt-relaxed-constexpr -D CUDA_FAST_MATH=ON -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.1 \
        -D CUDA_HOST_COMPILER=/usr/bin/gcc-7 ..
    make -j8 && make install
